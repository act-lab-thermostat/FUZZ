FUZZ {
  Program      = Body
  Body         = Statement+
  Statement    = Assignment
               | "iph" Exp Body
                 ("elz iph" Exp Body)*
                 ("elz" Body)? 
                 "~"                              -- if
               | "while" Exp Body "~"             -- while
               | "chill"                          -- break
               | Call
               | VarDec
               | FuncDec
               | Exp1
  Assignment   = Var "=" Exp
  Exps         = ListOf<Exp, ",">
  Exp          = Exp logop Exp1                   -- binary
               | Exp1
  Exp1         = Exp2 relop Exp2                  -- binary
               | Exp2
  Exp2         = Exp2 addop Exp3                  -- binary
               | Exp3
  Exp3         = Exp3 mulop Exp4                  -- binary
               | Exp4
  Exp4         = prefixop Exp5                    -- negation
               | Exp5
  Exp5         = Call | Array | Literal | Dict | Set | Var
  Var          = id
  Literal      = numlit
               | strlit
               | boollit
  Array        = "[" Exps "]"
  Field        = id ":" Exp
  Dict         = "{" ListOf<Field, ","> "}"
  Set          = "{" ListOf<Exp, ","> "}"
  Call         = id "(" ListOf<Exp, ","> ")"
  VarDec       = "fuzz" id (typeId)? "=" Exp
  FuncDec      = "function" id (typeId)? "(" id* ")" Body* "~"
  keyword      = ( "chill" | "iph" | "elz" | "returnt" | "fuzzArr" |
                  "fuzz" | "function" | "while" | "print" | "not" |
                  "cozy" | "not_cozy") ~idrest
  typeId       = id           
  id           = ~keyword letter idrest*
  idrest       = letter | digit | "_"
  numlit       = digit+ ("." digit+)?
  boollit      = "cozy" | "not_cozy"
  strlit       = "\"" char* "\""
  char         = ~"\\" ~"\"" ~"\n" any | escape
  escape       = "\\" ("\\" | "\"" | "n" | "t")
  mulop        = "**"| "*" | "/"
  addop        = "+" | "-"
  logop        = "&" | "|"
  relop        = "<="| "<" | ">=" | ">" | "not=" | "=="
  prefixop     = "not" | "-"
  space       := " " | "\t" | "\n" | comment
  comment      = "yoo!" (~"yoo!" any)* "!!"
}
