FUZZ {
  Statement    = Body
  Body         = "iph" Exps "~" Exps ("elz" Exps)?      -- if
               | "while" Exps "~" Exps                  -- while
               | "chill"                                -- break
               | Call
               | VarDec
               | Exp1
  Exps         = ListOf<Body, ",">
  Exp1         = Exp2 relop Exp2                        -- binary
               | Exp2
  Exp2         = Exp2 addop Exp3                        -- binary
               | Exp3
  Exp3         = Exp3 mulop Exp4                        -- binary
               | Exp4
  Exp4         = prefixop Exp5                          -- negation
               | Exp5
  Exp5         = Call | Array | Literal | id        
  Literal      = numlit
               | strlit
               | boollit
  Array        = typeId "=" "[" Body ("," Body)* "]"
  Call         = id "(" ListOf<Body, ","> ")"
  VarDec       = "fuzz" id (typeId)? "=" Body
  keyword      = ("array" | "chill" | "iph" | "elz" |
                  "var" | "while") ~idrest
  typeId       = id           
  id           = ~keyword letter idrest*
  idrest       = letter | digit | "_"
  numlit       = digit+ ("." digit+)?
  boollit      = "cozy" | "not_cozy"
  strlit       = "\"" char* "\""
  char         = ~"\\" ~"\"" ~"\n" any | escape
  escape       = "\\" ("\\" | "\"" | "n" | "t")
  mulop        = "**"| "*" | "/"
  addop        = "+" | "-"
  relop        = "<="| "<" | ">=" | ">" | "not=" | "=" | "&" | "|"
  prefixop     = "not" | "-"
  space       := " " | "\t" | "\n" | comment
  comment      = "yoo!" (~"yoo!" any)* "!!"
}
