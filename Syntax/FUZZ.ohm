FUZZ {
  Program      = Body
  Body         = Statement+
  Statement    = Assignment
               | "iph" Exp Body "~"
                 ("elz iph" Exp Body "~")*
                 ("elz" Body)?
                 "~"                              -- iph
               | "while" Exp Body "~"             -- while
               | Lvalue "=" Exp                   -- assign
               | "chill"                          -- chill
               | Call
               | FunDec
               | Exp1
  Assignment   = "fuzz" TypeDec typeId "=" Exp
  Exps         = ListOf<Exp, ",">
  Exp          = Exp logop Exp1                   -- binary
               | Exp1
  Exp1         = Exp2 relop Exp2                  -- binary
               | Exp2
  Exp2         = Exp2 addop Exp3                  -- binary
               | Exp3
  Exp3         = Exp3 mulop Exp4                  -- binary
               | Exp4
  Exp4         = prefixop Exp5                    -- negation
               | Exp5
  Exp5         = "(" Exp ")"                      -- parens
               | Call
               | ArrayExp
               | Literal
               | DictExp
               | Lvalue
  TypeDec      = "num" | "str" | "bool"
  Literal      = numlit
               | strlit
               | boollit
  Lvalue       = Lvalue "[" Exp "]"               -- subscripted
               | Lvalue "." id                    -- field
               | id                               -- id
  ArrayType    = "fuzzArr[" TypeDec "]"
  ArrayExp     = ArrayType typeId "=" "[" Exps "]"
  Field        = Literal ":" Exp
  DictType     = "fuzzDict<" TypeDec "," TypeDec ">"
  DictExp      = DictType typeId "=" "{" ListOf<Field, ","> "}"
  Call         = id "(" ListOf<Exp, ","> ")"
  FunDec       = "function" id (typeId)? "(" (TypeDec id ("," TypeDec id)*)* ")" Body* "~"
  keyword      = ( "chill" | "iph" | "elz" | "returnt" | "fuzzArr" |
                  "fuzzDict" | "fuzz" | "function" | "while" | "print" | "not" |
                  "cozy" | "not_cozy") ~idrest
  typeId       = id
  id           = ~keyword letter idrest*
  idrest       = letter | digit | "_"
  numlit       = digit+ ("." digit+)?
  boollit      = "cozy" | "not_cozy"
  strlit       = "\"" char* "\""
  char         = ~"\\" ~"\"" ~"\n" any | escape
  escape       = "\\" ("\\" | "\"" | "n" | "t")
  mulop        = "**"| "*" | "/"
  addop        = "+" | "-"
  logop        = "&" | "|"
  relop        = "<="| "<" | ">=" | ">" | "not=" | "=="
  prefixop     = "not" | "-"
  space       := " " | "\t" | "\n" | comment
  comment      = "yoo!" (~"yoo!" any)* "!!"
}
