Fuzz {
    Program = newline* Statement+ newline*
    
    Statement = SimpleStatement endline
              | "while" Exp                 --while
              | "iph" Exp 
               ("iph elz" Exp)*
               ("elz" Exp)?                 -- if/if else/else
               
    SimpleStatement = "fuzz" Ids "=" Exps   -- vardecl
                    | VarExps "=" Exps      -- assign
                    | Call                  -- Call
                    | "chill"               -- break
                    | "returnt" Exp?        -- return
                    
                    
    Exp =  Exp "or" Exp1                    -- or
         | Exp "and" Exp1                   -- and
         | Exp1
    Exp1 = Exp2 relop Exp2                  -- binary greater/less/equal
         | Exp2
    Exp2 = Exp2 addop Exp3                  -- binary, add/sub
         | Exp3
    Exp3 = Exp3 mulop Exp4                  -- binary, mult/div/expon
         | Exp4
    Exp4 = prefixop Exp5                    -- unary, not/negate
         | Exp5
    Exp5 = boollit
         | numlit
         | strlit
         | "[" ListOf<Exp, ","> "]"         -- list
         | Call
         | "(" Exp ")"               

    Exps    = NonemptyListOf<Exp, ","> 
    Call    = VarExp "(" parameter ")"
            | VarExp
    VarExp  = VarExp "[" Exp "]"             -- subscript
            | Ids
    VarExps = NonemptyListOf<VarExp, ",">
    Ids         =  NonemptyListOf<id, ",">


         
    parameter = type Ids ("=" parameter)?
    numlit    = digit+ ("." digit+)?
    boollit   = "cozy" | "not_cozy"
    strlit    = "\"" (~"\\" ~"\"" ~"\n" ~"\'" ~"\t" any)* "\""
    Exps      = NonemptyListOf<Exp, ",">

    keyword   = ("fuzz" | "phor" | "iph" | "elz" | "cozy" | "not_cozy" | "while" 
              | "not" |  "returnt" | "chill") ~idrest
    id        =  ~keyword ("_" | letter) idrest*
    idrest    =  "_" | alnum
    relop     =  "<=" | "<" | "==" | "not=" | ">=" | ">"
    addop     = "+" | "-"
    mulop     = "**" | "/" | "*"
    prefixop  = "not" | "-"
    endline   = ";"
    newline   = "\n"+
    comment   = "yoo!" (~"\n" any)*
}
